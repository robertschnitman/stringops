both = flags$l %&% s %&% flags$r)
output
#ifelse(string_len(s) != width, flag %&% s, s)
#formatC(x = s, flag = flag, width = width, ...)
}
string_flag('1234', flag = 0, width = 10)
stringr::str_pad
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
which <- match.arg(which)
diff  <- width - nchar(s)
flags <- rep(flag, diff)
if (which == 'both') {
flags <- list(l = rep(flag, diff/2), r = rep(flag, diff/2))
}
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
#ifelse(string_len(s) != width, flag %&% s, s)
#formatC(x = s, flag = flag, width = width, ...)
}
string_flag('1234', flag = 0, width = 10)
library(stringops)
string_flag('1234', flag = 0, width = 10)
string_flag('1234', flag = 0, width = 10, side = 'both')
string_flag('1234', flag = 0, width = 10, which = 'both')
rep(1, 2)
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
which <- match.arg(which)
diff  <- width - nchar(s)
flags <- string_join(rep(flag, diff))
if (which == 'both') {
flags <- list(l = rep(flag, diff/2), r = rep(flag, diff/2))
}
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
#ifelse(string_len(s) != width, flag %&% s, s)
#formatC(x = s, flag = flag, width = width, ...)
}
string_flag('1234', flag = 0, width = 10, which = 'both')
string_flag('1234', flag = 0, width = 10)
string_flag('1234', flag = 0, width = 10, which = 'right')
string_flag('1234', flag = 0, width = 10, which = 'both')
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
which <- match.arg(which)
diff  <- width - nchar(s)
flags <- string_join(rep(flag, diff))
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff/2)),
r = string_join(rep(flag, diff/2)))
}
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
#ifelse(string_len(s) != width, flag %&% s, s)
#formatC(x = s, flag = flag, width = width, ...)
}
string_flag('1234', flag = 0, width = 10, which = 'both')
string_flag(rownames(mtcars), flag = 0, width = 10, which = 'both')
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff  <- width - nchar(s)
flags <- string_join(rep(flag, diff))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff/2)),
r = string_join(rep(flag, diff/2)))
}
# Output should be a string vector based on the "which" input.
switchv <- function(x, ...) sapply(x, switch, ...)
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars), flag = 0, width = 10, which = 'both')
sapply(rownames(mtcars),  function(x) string_flag(x, flag = 0, width = 10, which = 'both')
)
sapply(rownames(mtcars),  function(x) string_flag(x, flag = 0, width = 10, which = 'both'))
sapply("abcd", function(x) string_flag(x, flag = 0, width = 10, which = 'both'))
string_flag("abcd", flag = 0, width = 10, which = 'both')
string_flag("abc", flag = 0, width = 10, which = 'both')
string_flag("abc", flag = 0, width = 10, which = 'left')
nchar(string_flag("abc", flag = 0, width = 10, which = 'left'))
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff  <- width - nchar(s)
flags <- sapply(rep(flag, diff), string_join)
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff/2)),
r = string_join(rep(flag, diff/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag("abc", flag = 0, width = 10, which = 'left')
string_flag("abc", flag = 0, width = 10, which = 'both')
string_flag(rownames(mtcars), flag = 0, width = 10, which = 'both')
rep(0, 1:3)
sapply(1, function(x) rep(0, 1))
sapply(1, function(x) rep(0, 2))
string_join(sapply(1, function(x) rep(0, 2)))
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff  <- width - nchar(s)
flags <- string_join(sapply(diff, function(x) rep(flag, x)))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff/2)),
r = string_join(rep(flag, diff/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag('1234', 0, 10, 'left')
string_flag('1234', 0, 10, 'right')
string_flag('1234', 0, 10, 'both')
string_flag(rownames(mtcars), 0, 10, 'both')
string_flag(rownames(mtcars), 0, 10, 'left')
10 - nchar(rownames(mtcars))
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff < 0, 0, diff)
flags <- string_join(rep(flag, diff_adj))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars), 0, 10, 'left')
diff <- 10 - nchar(rownames(mtcars))
diff
diff_adj  <- ifelse(diff < 0, 0, diff)
diff_adj
rep(0, diff_adj)
sapply(diff_adj, rep, 0)
sapply(diff_adj, function(x) rep(0, x))
sapply(diff_adj, function(x) rep("0", x))
diff_adj
rep(0, 0)
rep(0, 1)
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff < 0, 1, diff)
flags <- string_join(rep(flag, diff_adj))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
rm(diff, diff_adj)
string_flag(rownames(mtcars), 0, 10, 'left')
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff < 0, 1, diff)
flags <- string_join(sapply(diff_adj, function(x) rep(flag, x)))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars), 0, 10, 'left')
s <- rownames(mtcars)
diff      <- width - nchar(s)
width <- 10
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff < 0, 1, diff)
diff_adj
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff <= 0, 1, diff)
flags <- string_join(sapply(diff_adj, function(x) rep(flag, x)))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars), 0, 10, 'left')
sapply(diff_adj, function(x) rep(flag, x))
flag = 0
sapply(diff_adj, function(x) rep(flag, x))
diff_adj
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff <= 0, 1, diff)
diff_adj
sapply(diff_adj, function(x) rep(flag, x))
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff <= 0, 1, diff)
flags <- string_flatten(lapply(sapply(diff_adj, function(x) rep(flag, x))), string_join)
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars), 0, 10)
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff <= 0, 1, diff)
flags <- string_flatten(lapply(sapply(diff_adj, function(x) rep(flag, x)), string_join))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars), 0, 10)
string_flag(rownames(mtcars), 0, 10, 'both')
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff <= 0, 1, diff)
flags <- string_join(rep(flag, diff_adj))
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag('abcd', 0, 10)
args(string_flag)
#' @rdname string_flagv
string_flagv <- function(s, ...) {
sapply(s, function(x) string_flag(x, ...))
}
string_flagv(rownames(mtcars), 0, 10)
string_flagv(rownames(mtcars), 0, 10, 'both')
string_flag(rownames(mtcars)[1], 0, 10, 'both')
string_flag(rownames(mtcars)[1], 0, 10, 'left')
string_flag(rownames(mtcars)[1], 0, 10, 'right')
string_flag(rownames(mtcars)[2], 0, 10, 'right')
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# string_flag() is a scalar function
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff <= 0, 1, diff)
flags <- string_join(rep(flag, diff_adj))
flags <- ifelse(nchar(flags) > width,
string_remove(flags, flags),
flags)
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars)[2], 0, 10, 'right')
#' @rdname string_flag
string_flag <- function(s, flag, width, which = c('left', 'right', 'both')) {
# string_flag() is a scalar function
# Check which input
which <- match.arg(which)
# Repeat flag a specified number of times.
diff      <- width - nchar(s)
diff_adj  <- ifelse(diff <= 0, 1, diff)
flags <- string_join(rep(flag, diff_adj))
flags <- ifelse(nchar(s) > width,
string_remove(flags, flags),
flags)
# Special case for "both".
if (which == 'both') {
flags <- list(l = string_join(rep(flag, diff_adj/2)),
r = string_join(rep(flag, diff_adj/2)))
}
# Output should be a string vector based on the "which" input.
output <- switch(which,
left = flags %&% s,
right = s %&% flags,
both = flags$l %&% s %&% flags$r)
output
}
string_flag(rownames(mtcars)[2], 0, 10, 'right')
string_flag(rownames(mtcars)[1], 0, 10, 'right')
string_flag(rownames(mtcars)[1], 0, 10, 'both')
string_flag(rownames(mtcars)[2], 0, 10, 'both')
string_flag(rownames(mtcars)[3], 0, 10, 'both')
rownames(mtcars)[3]
#' @rdname string_flagv
string_flagv <- function(s, ...) {
sapply(s, function(x) string_flag(x, ...))
}
string_flagv(rownames(mtcars), 0, 10, 'both')
#' @rdname string_flagv
string_flagv <- function(s, ...) {
output <- sapply(s, function(x) string_flag(x, ...))
names(output) <- NULL
output
}
string_flagv(rownames(mtcars), 0, 10, 'both')
roxygen2::roxygenise()
pkgdown::build_site()
stringops::string_cut('asd', which = 'bloirps')
roxygen2::roxygenise()
library(stringops)
string_spot
string_spoti
string_invertm <- function(s, pattern) {
indices <- string_spoti(s, pattern)
output <- s[!c(1:length(s)) %in% indices]
output
}
string_spot(rownames(mtcars), '^M')
string_invertm(rownames(mtcars), '^M')
string_spotm_invert <- function(s, pattern) {
indices <- string_spoti(s, pattern)
output <- ifelse(!c(1:length(s)) %in% indices, s, NA_character_)
output
}
string_spotm_invert(rownames(mtcars), '^M')
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
find
string_spotm <- function(s, pattern, invert = FALSE) {
if (invert == FALSE) {
output <- ifelse(grepl(pattern, s), s, NA_character_)
} else {
output <- ifelse(!grepl(pattern, s), s, NA_character_)
}
}
string_spotm(rownames(mtcars), '^M')
}
string_spotm <- function(s, pattern, invert = FALSE) {
if (invert == FALSE) {
output <- ifelse(grepl(pattern, s), s, NA_character_)
} else {
output <- ifelse(!grepl(pattern, s), s, NA_character_)
}
output
}
string_spotm(rownames(mtcars), '^M')
string_spotm(rownames(mtcars), '^M', TRUE)
!string_spotm(rownames(mtcars), '^M')
string_spotl <- function(s, pattern, invert = FALSE) {
if (invert == FALSE) {
output <- grepl(pattern, s)
} else {
output <- !grepl(pattern, s)
}
output
}
!string_spotl(rownames(mtcars), '^M')
roxygen2::roxygenise()
roxygen2::roxygenise()
indices
index
grep('^M', rownames(mtcars))
string_spoti <- function(s, pattern, invert = FALSE) {
# String vector length must be greater than 0.
stopifnot(length(s) > 0)
# Get indices for matching purposes.
indices <- seq_along(s)
pre_match <- grep(pattern, s)
if (invert == FALSE) {
output <- pre_match
} else {
output <- s[!pre_match %in% indices]
}
output
}
string_spoti(rownames(mtcars), '^m')
string_spoti(rownames(mtcars), '^M')
string_spoti(rownames(mtcars), '^M', TRUE)
string_spoti <- function(s, pattern, invert = FALSE) {
# String vector length must be greater than 0.
stopifnot(length(s) > 0)
# Get indices for matching purposes.
indices <- seq_along(s)
pre_match <- grep(pattern, s)
if (invert == FALSE) {
output <- pre_match
} else {
output <- indices[!indices %in% pre_match]
}
output
}
string_spoti(rownames(mtcars), '^M', TRUE)
string_spotm(rownames(mtcars), '^M', TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
