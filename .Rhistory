test1
map(test1, ~ strsplt(.x, ""))
map(test1, ~ strsplit(.x, ""))
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ replace(.x, 1, toupper(.x)))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x))))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(string_join)
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(" "))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " "))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map(string_chop)
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
test2
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
library(tidyverse)
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
test1 <- tolower(rn) %>%
strsplit(., " ")
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
})
library(tidyverse)
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
test1 <- tolower(rn) %>%
strsplit(., " ")
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
test2
library(tidyverse)
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
test1 <- tolower(rn) %>%
strsplit(., " ")
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x[1])))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
test2
string_titlecase <- function(s) {
splits1 <- strsplit(tolower(s), " ")
splits2 <- lapply(splits1, function(x) strsplit(x, ""))
splits3 <- lapply(splits2, function(x) lapply(x, function(y) replace(y, 1, toupper(y[1]))))
splits4 <- lapply(splits3, function(x) lapply(x, string_join))
splits5 <- lapply(splits4, function(x) string_join(x, " "))
output  <- sapply(splits5, string_chop)
output
}
string_titlecase(rn)
roxygen2::roxygenise()
roxygen2::roxygenise()
strings <- c('and then there were none', 'silent hill: revelations', 'the lightning thief')
string_titlecase(strings)
string_cut("cut this please", which = 'both')
roxygen2::roxygenise()
roxygen2::roxygenise()
string_cut("cut this please", which = 'left')
string_cut("cut this please", which = 'right')
string_cut("cut this please", which = 'both')
devtools::install_github('robertschnitman/stringops', force = TRUE)
library(stringops)
"^" %&% whitespace %&% "|" %&% whitespace %&% "+$"
whitespace = '[ \t\r\n]'
"^" %&% whitespace %&% "|" %&% whitespace %&% "+$"
string_trim('   s   ', 'both')
#' @rdname string_trim
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
# Make sure arguments match "which".
which <- match.arg(which)
# Define functions for easier referencing.
## Remove specific patterns
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
## vectorize switch so that we can apply the substitutions in a vectorized manner.
switch_out <- function(x, ...) sapply(x, switch, ...)
# Conditions for each "which" input.
cond_beg  <- '^' %&% whitespace %&% '+'
cond_end  <- whitespace %&% '+$'
cond_both <- "^" %&% whitespace %&% "*|" %&% whitespace %&% "*+$"
# Output should be based on user input for "which".
output <- switch_out(which,
left  = sub_out(s, cond_beg),
right = sub_out(s, cond_end),
both  = sub_out(s, cond_both))
# Initial output is a matrix, so flatten it to a vector so that
# users can use string_trim() on dataframe columns, for example.
output <- as.vector(output)
output
}
string_trim('   s   ', 'both')
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = TRUE)
rm(list = ls()
)
library(stringops)
string_trim("   s   ")
string_insert
stringr::str_count
stringi::stri_count
stringi::stri_count_coll
#' @rdname string_count
string_count <- function(s, pattern) {
loc <- gregexpr(pattern = pattern, text = s, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
}
string_count(rownames(mtcars), 'M')
string_count(rownames(mtcars), 'm')
string_count(rownames(mtcars), '^M')
#' @rdname string_count
string_count <- function(s, pattern) {
loc <- gregexpr(pattern = pattern, text = s)
sapply(loc, function(x) length(attr(x, "match.length")))
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
}
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), 'M')
test <- gregexpr('^M', rownames(mtcars))
test
args(gregexpr)
#' @rdname string_count
string_count <- function(s, pattern) {
loc <- gregexpr(pattern = pattern, text = s, perl = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
}
args(gregexpr)
string_count(rownames(mtcars), 'M')
args(gregexpr)
gregexpr('M', rownames(mtcars))
gregexpr('z', rownames(mtcars))
loc <- gregexpr('z', rownames(mtcars))
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
fruit
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "z", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = " ", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "Z", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "asd", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc
sapply(loc, function(x) attr(x, 'match.length')
)
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) attr(x, "match.length"))
out1 <- lapply(loc, function(x) attr(x, "match.length"))
out1
sapply(out1, function(x) sum(ifelse(x == -1, 0, 1)))
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), '^M', perl = TRUE)
#' @rdname string_count
string_count <- function(s, pattern, ...) {
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
locations <- gregexpr(pattern = pattern, text = s, ...)
matches <- lapply(locations, function(x) attr(x, "match.length"))
output <- sapply(matches, function(x) sum(ifelse(x == -1, 0, 1))) # -1 for no matches
output
}
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), 'M')
string_count(rownames(mtcars), 'a')
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = T)
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = T)
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = TRUE)
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = T)
library(stringops)
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(initial, collapse %&% "$", "")
}
output
}
string_join(rownames(mtcars))
string_join(rownames(mtcars), ", ")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(initial, collapse %&% "+$", "")
}
output
}
string_join(rownames(mtcars), ", ")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(output, collapse %&% "+$", "")
}
output
}
string_join(rownames(mtcars), ", ")
test <- string_join(rownames(mtcars), ", ")
string_replace(test, test %&% "+$", "")
string_replace(test, test %&% "$", "")
string_replace(test, test, "")
string_replace(test, ", $", "")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(output, collapse %&% "$", "")
}
output
}
string_join(rownames(mtcars), ", ")
roxygen2::roxygenise()
rm(list = ls())
devtools::install_github('robertschnitman/stringops)
devtools::install_github('robertschnitman/stringops')
library(stringops)
string_join(rownames(mtcars), ", ")
string_join(rownames(mtcars), "")
string_join(rownames(mtcars), ",")
"" == ", "
test <- string_join(rownames(mtcars), ", ")
collapse = ", "
test <- string_join(rownames(mtcars), collapse)
test
collapse %&% "$"
string_replace(test, collapse %&% "$", "")
string_remove(test, collapse %&% "$", "")
string_remove(test, collapse %&% "$")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_remove(output, collapse %&% "$")
}
output
}
string_join(rowname(mtcars), collapse = ", ")
string_join(rownames(mtcars), collapse = ", ")
string_join(rownames(mtcars), ", ")
#' @rdname string_join
string_join <- function(s, collapse = "") {
output <- paste0(s, collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_remove(output, collapse %&% "$")
}
output
}
string_join(rownames(mtcars), ", ")
string_join(rownames(mtcars), ", ")
devtools::install_github('robertschnitman/stringops', force = T)
install.packages('pkgdown')
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site
pkgdown::build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
args(pkgdown::build_site)
?pkgdown::build_site
pwd()
getwd()
pkgdown::build_site(paste0(getwd(), "/docs"))
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site
trimwd
trimws
library(stringops)
?search_replace
?string_replace
??string_replace
?string_find
roxygen2::roxygenise()
pkgdown::build_site()
TRUE == 1
TRUE == 1
FALSE == 0
test <- string_split('hello', "")
test
unique(test)
sapply(test, unique)
unique(test[[1]])
test <- string_split(rownames(mtcars))
test <- string_split(rownames(mtcars), "")
test
test <- as.vector(string_split(rownames(mtcars), ""))
test
test <- do.call(rbind, string_split(rownames(mtcars), ""))
test
test <- string_split(rownames(mtcars), "")
test
lapply(test, unique)
test2 <- lapply(test, unique)
test2 <- lapply(lapply(test, unique), string_join)
test2
test2 <- as.vector(lapply(lapply(test, unique), string_join))
test2
stringr::str_flatten
test2 <- string_join(lapply(lapply(test, unique), string_join))
test
test2
test2 <- c(lapply(lapply(test, unique), string_join))
test2
test2 <- paste0((lapply(lapply(test, unique), string_join)), collapse = "")
test
test2
test2 <- paste0((lapply(lapply(test, unique), string_join)), sep = "")
test2
string_flatten <- function(l) {
# Type-check
if (typeof(l) != 'list') {
stop('Input detected is of type ' %&% typeof(l) %&% " instead of list. Please use a list.")
}
# Output
output <- paste0(l, sep = "")
output
}
test2 <- string_flatten((lapply(lapply(test, unique), string_join)))
test2
test
string_split(rownames(mtcars), "")
test <- string_split(rownames(mtcars), "")
sapply(test, unique)
#' @rdname string_unique
string_unique <- function(s) {
# Split by each character.
splits <- string_split(s, "")
# Get unique characters per element.
splits_unique <- lapply(splits, unique)
# Flatten list to a vector
output <- string_flatten(splits_unique)
# Output should be a vector.
output
}
string_unique(rownames(mtcars))
string_flatten
paste0(test, sep = "")
paste0(test, sep = "")
#' @rdname string_unique
string_unique <- function(s) {
# Split by each character.
splits <- string_split(s, "")
# Get unique characters per element.
splits_unique <- lapply(splits, unique)
# Get a single string for each list element.
splits_join <- lapply(splits_unique, string_join)
# Flatten list to a vector
output <- string_flatten(splits_unique)
# Output should be a vector.
output
}
string_unique(rownames(mtcars))
#' @rdname string_unique
string_unique <- function(s) {
# Split by each character.
splits <- string_split(s, "")
# Get unique characters per element.
splits_unique <- lapply(splits, unique)
# Get a single string for each list element.
splits_join <- lapply(splits_unique, string_join)
# Flatten list to a vector
output <- string_flatten(splits_unique)
# Output should be a vector.
output
}
string_unique(rownames(mtcars))
lapply(test, string_join)
string_flatten(lapply(test, string_join))
#' @rdname string_unique
string_unique <- function(s) {
# Split by each character.
splits <- string_split(s, "")
# Get unique characters per element.
splits_unique <- lapply(splits, unique)
# Get a single string for each list element.
splits_join <- lapply(splits_unique, string_join)
# Flatten list to a vector
output <- string_flatten(splits_join)
# Output should be a vector.
output
}
string_unique(rownames(mtcars))
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
string_flatten(as.list(rownames(mtcars)))
string_flatten(list('a', 'b', 'c'))
roxygen2::roxygenise()
pkgdown::build_site()
#' @rdname string_flag
string_flag <- function(s, flag, width) {
# ifelse(string_length(s) != width, flag %&% s, s)
replace(s, string_length(s) != width, flag %&% s)
}
string_flag('123456789', 0, 10)
library(stringops)
#' @rdname string_flag
string_flag <- function(s, flag, width) {
# ifelse(string_len(s) != width, flag %&% s, s)
replace(s, string_len(s) != width, flag %&% s)
}
string_flag('123456789', 0, 10)
string_flag(rownames(mtcars), 0, 10)
#' @rdname string_flag
string_flag <- function(s, flag, width) {
ifelse(string_len(s) != width, flag %&% s, s)
# replace(s, string_len(s) != width, flag %&% s)
}
string_flag(rownames(mtcars), 0, 10)
string_flag('123456789', 0, 10)
?formatC
#' @rdname string_flag
string_flag <- function(s, flag, width) {
#ifelse(string_len(s) != width, flag %&% s, s)
formatC(s, width = width, flag = flag)
}
string_flag('123456789', 0, 10)
#' @rdname string_flag
string_flag <- function(s, flag, width) {
#ifelse(string_len(s) != width, flag %&% s, s)
formatC(x = s, width = width, flag = flag)
}
string_flag('123456789', 0, 10)
#' @rdname string_flag
string_flag <- function(s, f, width) {
#ifelse(string_len(s) != width, flag %&% s, s)
formatC(x = s, width = width, flag = f)
}
string_flag('123456789', 0, 10)
#' @rdname string_flag
string_flag <- function(s, f, width) {
ifelse(string_len(s) != width, flag %&% s, s)
#formatC(x = s, width = width, flag = flag)
}
string_flag('123456789', 0, 10)
#' @rdname string_flag
string_flag <- function(s, flag, width) {
ifelse(string_len(s) != width, flag %&% s, s)
#formatC(x = s, width = width, flag = flag)
}
string_flag('123456789', 0, 10)
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
devtools::install_github('robertschnitman/stringops', force = T)
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
