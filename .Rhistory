s_findl      <- string_findl
findl        <- string_findl
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
search_replace <- string_replace
sr             <- string_replace
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove
remove        <- remove
s_replace
gsub
`%&%` <- function(a, b) paste0(a, b)
string_prefix <- function(x, prefix) prefix %&% x
s_prefix      <- string_prefix
prefix        <- string_prefix
string_suffix <- function(x, suffix) x %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
prefix(iris$Species, "cool_")
suffix(iris$Species, "cool_")
suffix(iris$Species, "_cool")
"cool_" %&% iris$Species
string_cull <- function(s, pattern) {
func <- function(x) grep(pattern, x, value = TRUE)
sapply(s, func)
}
s_cull <- string_cull
cull   <- string_cull
string_left <- function(s, n) substr(s, 1, n)
s_left      <- string_left
left        <- string_left
string_right <- function(s, n) substr(s, nchar(s) - n + 1, nchar(s))
s_right      <- string_right
right        <- string_right
string_mid <- substr
s_mid      <- string_mid
mid        <- string_mid
string_cull(rownames(mtcars), '^M')
c(string_cull(rownames(mtcars), '^M'))
as.vector(string_cull(rownames(mtcars), '^M'))
as.data.frame(string_cull(rownames(mtcars), '^M'))
regexpr('^M', rownames(mtcars))
regmatches('^M', rownames(mtcars))
string_findm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
string_findm(rownames(mtcars), '^M')
string_find  <- function(s, pattern) grep(pattern, s, value = TRUE)
s_find       <- string_find
find         <- string_find
string_findi <- function(s, pattern) grep(pattern, s)
s_findi      <- string_findi
findi        <- string_findi
string_findl <- function(s, pattern) grepl(pattern, s)
s_findl      <- string_findl
findl        <- string_findl
string_findm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
s_findm      <- string_findm
findm        <- string_findm
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- stirng_replace
search_replace <- string_replace
sr             <- string_replace
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove
remove        <- remove
find
string_find  <- function(s, pattern) grep(pattern, s, value = TRUE)
s_find       <- string_find
find         <- string_find
string_findi <- function(s, pattern) grep(pattern, s)
s_findi      <- string_findi
findi        <- string_findi
string_findl <- function(s, pattern) grepl(pattern, s)
s_findl      <- string_findl
findl        <- string_findl
string_findm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
s_findm      <- string_findm
findm        <- string_findm
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- string_replace
search_replace <- string_replace
sr             <- string_replace
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove
remove        <- remove
find
find(rownames(mtcars), '^m')
find(rownames(mtcars), '^M')
findl(rownames(mtcars), '^M')
findi(rownames(mtcars), '^M')
findm(rownames(mtcars), '^M')
strsplit(rownames(mtcars), "")
library(tidyverse)
strsplit(rownames(mtcars), "") %>% lapply(rev)
strsplit(rownames(mtcars), "") %>% map(rev)
strsplit(rownames(mtcars), "") %>% map(rev) %>% map(~ paste0(.x, collapse = ""))
strsplit(rownames(mtcars), "") %>% map(rev) %>% map(~ paste0(.x, collapse = "")) %>% str_flatten
strsplit(rownames(mtcars), "") %>% map(rev) %>% map_chr(~ paste0(.x, collapse = ""))
strsplit(rownames(mtcars), "") %>% map(rev) %>% sapply(function(.x) paste0(.x, collapse = ""))
s_dup <- strrep
# s_insert <- function(s, position, insert) s
s_split <- strsplit
string_len <- nchar
s_len      <- string_len
len        <- string_len
string_reverse <- function(s) {
splits <- lapply(strsplit(s, ""), rev)
output <- sapply(splits, function(x) paste0(x, collapse = ""))
output
}
s_reverse <- string_reverse
reverse   <- string_reverse
string_reverse(rownames(mtcars))
strsplit(rownames(mtcars), "")
strsplit(rownames(mtcars), "") %>% map(~ ifelse(.x %in% letters, toupper(.x), tolower(.x)))
strsplit(rownames(mtcars), "") %>% map_char(~ ifelse(.x %in% letters, toupper(.x), tolower(.x)))
strsplit(rownames(mtcars), "") %>% map_chr(~ ifelse(.x %in% letters, toupper(.x), tolower(.x)))
strsplit(rownames(mtcars), "") %>% map(~ ifelse(.x %in% letters, toupper(.x), tolower(.x)))
strsplit(rownames(mtcars), "") %>% map(~ ifelse(.x %in% letters, toupper(.x), tolower(.x))) %>% map_chr(~ paste0(.x, collapse = ''))
string_join <- function(..., collapse = "") paste0(..., collapse = collapse)
s_join      <- string_join
join        <- string_join
string_swapcase <- function(s) {
case_test <- function(x) ifelse(x %in% letters, toupper(x), tolower(x))
splits <- lapply(strsplit(s, ""), case_test)
output <- sapply(splits, string_join)
output
}
string_swapcase(rownames(mtcars))
tools::toTitleCase()
tools::toTitleCase
rownames(mtcars) %>% str_split(" ")
c('hello boi', 'how are you', 'good im fine') %>% str_split(" ")
c('hello boi', 'how are you', 'good im fine') %>% str_split(" ") %>% map(str_split)
c('hello boi', 'how are you', 'good im fine') %>% str_split(" ") %>% map(str_split, "")
c('hello boi', 'how are you', 'good im fine') %>% str_split(" ") %>% map(str_split, "") %>% map(toupper)
c('hello boi', 'how are you', 'good im fine') %>% str_split(" ") %>% map(str_split, "") %>% map(~ map(.x, toupper)
)
str_extract()
str_extract
str_extract(rownames(mtcars), '^M')
str_extract(rownames(mtcars), '^M*')
str_extract(rownames(mtcars), '^M.*')
regexpr
regexpr('^M', rownames(mtcars))
regmatches(rownames(mtcars, '^M'))
regmatches(rownames(mtcars), '^M')
?regmatches
regmatches(rownames(mtcars), regexpr(rownames(mtcars), "^M"))
regmatches(rownames(mtcars), gregexpr(rownames(mtcars), "^M"))
gregexpr(rownames(mtcars), "^M")
regexpr(rownames(mtcars), "^M")
gregexpr('^M', rownames(mtcars))
m <- gregexpr('^M', rownames(mtcars))
regmatches(rownames(mtcars), m)
regmatches(rownames(mtcars), m) %>% str_c
regexpr('^M', rownames(mtcars))
m <- regexpr('^M', rownames(mtcars))
regmatches(rownames(mtcars), m)
m <- gregexpr('^M', rownames(mtcars))
m
regm <- regmatches(rownames(mtcars), m)
regm
is.null(character(0))
ifelse(m == character)
ifelse(m == character(0), NA_character_, m)
lapply(m, function(x) ifelse(x == character(0), NA_character_, x))
1 == character(0)
character(0)
character(1)
character(0) < character(1)
regm
regm %>% str(c)
regm %>% str_c
sapply(regm, paste0)
sapply(regm, string_join)
string_cull <- function(s, pattern) {
m <- gregexpr(pattern, s)
regm <- regmatches(s, m)
flat <- sapply(regm, string_join)
output <- ifelse(flat == "", NA_character_, flat)
output
}
string_cull(rownames(mtcars), '^M')
string_cull(rownames(mtcars), '^M/*')
string_cull(rownames(mtcars), '^M.*')
string_reverse <- function(s) {
splits <- lapply(strsplit(s, ""), rev)
output <- sapply(splits, string_join)
output
}
string_reverse(rownames(mtcars))
mtcars %>% rownames() %>% string_reverse()
string_cull(rownames(mtcars), "M")
string_cull(rownames(mtcars), "*M*")
string_cull(rownames(mtcars), ".*M,*")
string_cull(rownames(mtcars), ".*M.*")
string_cull(rownames(mtcars), "Ma*")
string_cull(rownames(mtcars), "Ma.*")
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- x[position] %&% insert
x
}
splits <- lapply(strsplits(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- x[position] %&% insert
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
`%&%` <- function(a, b) paste0(a, b)
string_prefix <- function(x, prefix) prefix %&% x
s_prefix      <- string_prefix
prefix        <- string_prefix
string_suffix <- function(x, suffix) x %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- x[position] %&% insert
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
`%&%` <- function(a, b) paste0(a, b)
string_prefix <- function(x, prefix) prefix %&% x
s_prefix      <- string_prefix
prefix        <- string_prefix
string_suffix <- function(x, suffix) x %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- x[position] %&% insert
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- insert %&% x[position]
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
string_split
string_split <- strsplit
string_split
string_dup
string_dup <- strrep
s_dup      <- string_dup
dup        <- string_dup
string_dup(rownames(mtcars), 3)
string_dup(rownames(mtcars), 1:32)
`%like%` <- function(s, pattern) grepl(pattern, s)
rownames(mtcars) %like% "^M"
subset(mtcars, rownames(mtcars) %like% "^M")
string_find  <- function(s, pattern) grep(pattern, s, value = TRUE)
s_find       <- string_find
find         <- string_find
string_findi <- function(s, pattern) grep(pattern, s)
s_findi      <- string_findi
findi        <- string_findi
string_findl <- function(s, pattern) grepl(pattern, s)
s_findl      <- string_findl
findl        <- string_findl
string_findm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
s_findm      <- string_findm
findm        <- string_findm
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- string_replace
search_replace <- string_replace
sr             <- string_replace
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove
remove        <- remove
subset(mtcars, findl(rownames(mtcars), '^M'))
string_isblank <- function(s) ifelse(s == "" | grepl(" *", s), TRUE, FALSE)
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               ")
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl(" *", s)
cond3 <- !grepl("[:graph:]") # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl(" *", s)
cond3 <- !grepl("[:graph:]", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl(" *", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl("[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
isblank("                               ")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl("*[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               ")
string_isblank <- function(s) {
cond1 <- s == ""
cond2 <- grepl("*[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
(cond1 | cond2) & cond3
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               ")
isblank("                               s")
isblank("                       ")
isblank("")
isblank(" ")
string_isblank <- function(s) {
cond1 <- s == ""
cond2 <- grepl("[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
(cond1 | cond2) & cond3
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank(" ")
isblank("")
grepl("*[:graph:]*", "   ")
grepl("*[:graph:]*", "   s")
grepl("*[:graph:]*", "   ")
grepl("*[:alnum:]*", "   ")
grepl("[:alnum:]", "   ")
grepl("[:alnum:]", "   s")
grepl("[:alnum:]", trimws("   s"))
twimws("  s")
trimws("  s")
trimws("      ")
string_isblank <- function(s) trimws(s) == ""
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("       ")
isblank("       s")
isblank(c("", ""       s")
isblank(c("", "       s")
)
?trimws
string_chomp <- function(s) gsub(" |\n|\t|\r", "", s)
s_chomp      <- string_chomp
chomp        <- string_chomp
string_chop <- function(s) substr(s, 1, nchar(s) - 1)
s_chop      <- string_chop
chop        <- string_chop
trimws(" s r")
trimws(" s r ")
string_chomp(" s r ")
string_chomp <- function(s) gsub(" |\n|\t|\r", "", s)
s_chomp      <- string_chomp
chomp        <- string_chomp
string_chop <- function(s) substr(s, 1, nchar(s) - 1)
s_chop      <- string_chop
chop        <- string_chop
string_trim <- trimws
string_trim
`%&%` <- function(a, b) paste0(a, b)
string_prefix <- function(x, prefix) prefix %&% x
s_prefix      <- string_prefix
prefix        <- string_prefix
string_suffix <- function(x, suffix) x %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
output
}
string_trim(" s r ")
twimws
trimws
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
output
}
twimws
string_trim(" s r ")
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
names(output) <- NULL
output
}
string_trim(" s r ")
string_trim(c(" s r ", " kr")
)
string_trim(c(" s r ", " kr"))
sapply(c(" s r ", " kr"), trim)
sapply(c(" s r ", " kr"), string_trim)
string_trim(c(" s r ", " kr"))
dim(string_trim(c(" s r ", " kr")))
NROW(string_trim(c(" s r ", " kr")))
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
names(output) <- NULL
colnames(output) <- NULL
output
}
NROW(string_trim(c(" s r ", " kr")))
string_trim(c(" s r ", " kr"))
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
output <- as.vector(output)
output
}
string_trim(c(" s r ", " kr"))
string_trim(c(" s r "))
trimws
string_trim(c(" s r "), 'lol')
trim
