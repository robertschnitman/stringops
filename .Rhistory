prefix        <- string_prefix
string_suffix <- function(x, suffix) x %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- x[position] %&% insert
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
`%&%` <- function(a, b) paste0(a, b)
string_prefix <- function(x, prefix) prefix %&% x
s_prefix      <- string_prefix
prefix        <- string_prefix
string_suffix <- function(x, suffix) x %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- x[position] %&% insert
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- insert %&% x[position]
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_insert(rownames(mtcars), "ROBERT", 3)
string_split
string_split <- strsplit
string_split
string_dup
string_dup <- strrep
s_dup      <- string_dup
dup        <- string_dup
string_dup(rownames(mtcars), 3)
string_dup(rownames(mtcars), 1:32)
`%like%` <- function(s, pattern) grepl(pattern, s)
rownames(mtcars) %like% "^M"
subset(mtcars, rownames(mtcars) %like% "^M")
string_find  <- function(s, pattern) grep(pattern, s, value = TRUE)
s_find       <- string_find
find         <- string_find
string_findi <- function(s, pattern) grep(pattern, s)
s_findi      <- string_findi
findi        <- string_findi
string_findl <- function(s, pattern) grepl(pattern, s)
s_findl      <- string_findl
findl        <- string_findl
string_findm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
s_findm      <- string_findm
findm        <- string_findm
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- string_replace
search_replace <- string_replace
sr             <- string_replace
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove
remove        <- remove
subset(mtcars, findl(rownames(mtcars), '^M'))
string_isblank <- function(s) ifelse(s == "" | grepl(" *", s), TRUE, FALSE)
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               ")
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl(" *", s)
cond3 <- !grepl("[:graph:]") # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl(" *", s)
cond3 <- !grepl("[:graph:]", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl(" *", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl("[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               s")
isblank("                               ")
string_isblank <- function(s) {
cond1 <- s== ""
cond2 <- grepl("*[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
ifelse((cond1 | cond2) & cond3, TRUE, FALSE)
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               ")
string_isblank <- function(s) {
cond1 <- s == ""
cond2 <- grepl("*[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
(cond1 | cond2) & cond3
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("                               ")
isblank("                               s")
isblank("                       ")
isblank("")
isblank(" ")
string_isblank <- function(s) {
cond1 <- s == ""
cond2 <- grepl("[:space:]*", s)
cond3 <- !grepl("*[:graph:]*", s) # exclude letters, numbers, and punctuation
(cond1 | cond2) & cond3
}
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank(" ")
isblank("")
grepl("*[:graph:]*", "   ")
grepl("*[:graph:]*", "   s")
grepl("*[:graph:]*", "   ")
grepl("*[:alnum:]*", "   ")
grepl("[:alnum:]", "   ")
grepl("[:alnum:]", "   s")
grepl("[:alnum:]", trimws("   s"))
twimws("  s")
trimws("  s")
trimws("      ")
string_isblank <- function(s) trimws(s) == ""
s_isblank      <- string_isblank
isblank        <- string_isblank
`%like%` <- function(s, pattern) grepl(pattern, s)
isblank("       ")
isblank("       s")
isblank(c("", ""       s")
isblank(c("", "       s")
)
?trimws
string_chomp <- function(s) gsub(" |\n|\t|\r", "", s)
s_chomp      <- string_chomp
chomp        <- string_chomp
string_chop <- function(s) substr(s, 1, nchar(s) - 1)
s_chop      <- string_chop
chop        <- string_chop
trimws(" s r")
trimws(" s r ")
string_chomp(" s r ")
string_chomp <- function(s) gsub(" |\n|\t|\r", "", s)
s_chomp      <- string_chomp
chomp        <- string_chomp
string_chop <- function(s) substr(s, 1, nchar(s) - 1)
s_chop      <- string_chop
chop        <- string_chop
string_trim <- trimws
string_trim
`%&%` <- function(a, b) paste0(a, b)
string_prefix <- function(x, prefix) prefix %&% x
s_prefix      <- string_prefix
prefix        <- string_prefix
string_suffix <- function(x, suffix) x %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
output
}
string_trim(" s r ")
twimws
trimws
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
output
}
twimws
string_trim(" s r ")
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
names(output) <- NULL
output
}
string_trim(" s r ")
string_trim(c(" s r ", " kr")
)
string_trim(c(" s r ", " kr"))
sapply(c(" s r ", " kr"), trim)
sapply(c(" s r ", " kr"), string_trim)
string_trim(c(" s r ", " kr"))
dim(string_trim(c(" s r ", " kr")))
NROW(string_trim(c(" s r ", " kr")))
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
names(output) <- NULL
colnames(output) <- NULL
output
}
NROW(string_trim(c(" s r ", " kr")))
string_trim(c(" s r ", " kr"))
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
which <- match.arg(which)
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
switch_out <- function(x, ...) sapply(x, switch, ...)
end <- whitespace %&% "+$"
beg <- "^" %&% whitespace %&% "+"
output <- switch_out(which,
left  = sub_out(s, '^' %&% whitespace %&% '+'),
right = sub_out(s, whitespace %&% '+$'),
both  = sub_out(s, "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"))
output <- as.vector(output)
output
}
string_trim(c(" s r ", " kr"))
string_trim(c(" s r "))
trimws
string_trim(c(" s r "), 'lol')
trim
glue::glue
glue::glue_data()
glue::glue_data
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
string_cull <- function(s, pattern) {
greg <- gregexpr(pattern, s)
regm <- regmatches(s, greg)
flat <- sapply(regm, string_join)
output <- ifelse(flat == "", NA_character_, flat)
output
}
s_cull         <- string_cull
cull           <- string_cull
string_extract <- string_cull
s_extract      <- string_cull
extract        <- string_cull
#' @rdname string_left
string_left <- function(s, n) substr(s, 1, n)
s_left      <- string_left
left        <- string_left
#' @rdname string_right
string_right <- function(s, n) substr(s, nchar(s) - n + 1, nchar(s))
s_right      <- string_right
right        <- string_right
#' @rdname string_mid
string_mid <- substr
s_mid      <- string_mid
mid        <- string_mid
string_cull(rownames(mtcars), '^M')
string_cull(rownames(mtcars), '^M.*')
roxygen2::roxygenise()
roxygen2::roxygenise()
rownames(mtcars) %like% "^M"
roxygen2::roxygenise()
substr
substr(rownames(mtcars), 2, 4)
substr(rownames(mtcars), 2, 2)
substr(rownames(mtcars), 2, 1)
roxygen2::roxygenise()
#' Find patterns in strings
#'
#' @description Find strings.
#'
#' @usage string_find(s, pattern)
#' s_find(s, pattern)
#' find(s, pattern)
#' string_findi(s, pattern)
#' s_findi(s, pattern)
#' findi(s, pattern)
#' string_findl(s, pattern)
#' s_findl(s, pattern)
#' findl(s, pattern)
#' string_findm(s, pattern)
#' s_findm(s, pattern)
#' findm(s, pattern)
#' string_replace(s, search, replace)
#' s_replace(s, search, replace)
#' find_replace(s, search, replace)
#' fr(s, search, replace)
#' search_replace(s, search, replace)
#' sr(s, search, replace)
#' string_remove(s, remove)
#' s_remove(s, remove)
#' remove(s, remove)
#'
#' @param s A string (character) vector.
#' @param pattern A regular expression pattern.
#' @param search A pattern to search.
#' @param replace The string to replace the searched pattern.
#' @param remove The string to remove.
#'
#' @return Character vector for all functions except the \code{findl} functions, which produce a Boolean vector.
#'
#' @details The function \code{string_find} subsets a vector to the values matching a given pattern. Its synonyms are \code{s_find} and \code{find}.
#'
#' The function \code{string_findi} provides the indices where a pattern in a vector is found. Its synonyms are \code{s_findi} and \code{findi}.
#'
#' The function \code{string_findl} detects whether a pattern exists in a vector. Its synonyms are \code{s_findl} and \code{findl}.
#'
#' The \code{findm} functions are synonyms of \code{string_cull}.
#'
#' The \code{*_replace} functions act the same as \code{gsub}.
#'
#' The \code{remove} functions blanks out a matching pattern.
#'
#' @examples
#' rn <- rownames(mtcars)
#'
#' string_find(rn, "^M")
#' string_findi(rn, "^M")
#' string_findl(rn, "^M")
#' string_findm(rn, "^M")
#'
#' string_replace(rn, "^M", "Z")
#' string_remove(rn, "^M")
#'
#' @seealso \url{https://github.com/robertschnitman/stringops}
string_find  <- function(s, pattern) grep(pattern, s, value = TRUE)
s_find       <- string_find
find         <- string_find
string_findi <- function(s, pattern) grep(pattern, s)
s_findi      <- string_findi
findi        <- string_findi
string_findl <- function(s, pattern) grepl(pattern, s)
s_findl      <- string_findl
findl        <- string_findl
string_findm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
s_findm      <- string_findm
findm        <- string_findm
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- string_replace
search_replace <- string_replace
sr             <- string_replace
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove
remove        <- remove
string_remove(rn, "^M")
rn <- rownames(mtcars)
string_remove(rn, "^M")
string_join(rownames(mtcars), ", ")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
strrep
args(strsplit)
strrep
#' Miscellaneous stirng functions
#'
#' @description Miscellaneous string functions due for a full explanation. Explore at your own risk!
#'
#' @usage string_dup(s, times)
#' string_insert(s, insert, position)
#' string_split(s, split, ...)
#' string_len(s)
#' string_reverse(s)
#'
#' @examples
#' string_dup(rownames(mtcars), 3)
#' string_insert("abcd", "Z", 3)
#'
#' @seealso \url{https://github.com/robertschnitman/stringops}
string_dup <- function(s, times) strrep(s, times)
s_dup      <- string_dup
dup        <- string_dup
string_insert <- function(s, insert, position) {
concat_insert <- function(x) {
x[position] <- insert %&% x[position]
x
}
splits <- lapply(strsplit(s, ""), concat_insert)
output <- sapply(splits, string_join)
output
}
string_split <- function(s, split, ...) strsplit(s, split, ...)
s_split      <- string_split
string_len <- nchar
s_len      <- string_len
len        <- string_len
string_reverse <- function(s) {
splits <- lapply(strsplit(s, ""), rev)
output <- sapply(splits, string_join)
output
}
s_reverse <- string_reverse
reverse   <- string_reverse
string_insert("abcd", "Z", 3).
string_insert("abcd", "Z", 3)
roxygen2::roxygenise()
#' Remove (empty) characters from a string as inspired by Ruby
#'
#' @description Remove (empty) characters from a string as inspired by Ruby.
#'
#' @usage string_chomp(s)
#' s_chomp(s)
#' chomp(s)
#' string_chop(s)
#' s_chop(s)
#' chop(s)
#'
#' @param s A string (character) vector.
#'
#' @return Character vector.
#'
#' @examples
#' string_chomp(rownames(mtcars))
#' string_chop(rownames(mtcars))
#'
#' @seealso \url{https://github.com/robertschnitman/stringops}
string_chomp <- function(s) gsub(" |\n|\t|\r", "", s)
s_chomp      <- string_chomp
chomp        <- string_chomp
string_chop <- function(s) substr(s, 1, nchar(s) - 1)
s_chop      <- string_chop
chop        <- string_chop
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
# Make sure arguments match "which".
which <- match.arg(which)
# Define functions for easier referencing.
## Remove specific patterns
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
## vectorize switch so that we can apply the substitutions in a vectorized manner.
switch_out <- function(x, ...) sapply(x, switch, ...)
# Conditions for each "which" input.
cond_beg  <- '^' %&% whitespace %&% '+'
cond_end  <- whitespace %&% '+$'
cond_both <- "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"
# Output should be based on user input for "which".
output <- switch_out(which,
left  = sub_out(s, cond_beg),
right = sub_out(s, cond_end),
both  = sub_out(s, cond_both))
# Initial output is a matrix, so flatten it to a vector so that
# users can use string_trim() on dataframe columns, for example.
output <- as.vector(output)
output
}
s_trim      <- string_trim
trim        <- string_trim
roxygen2::roxygenise
roxygen2::roxygenise()
roxygen2::roxygenise()
