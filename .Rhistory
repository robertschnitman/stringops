swapcase   <- string_swapcase
swapcase(test1[[1]])
swapcase(test1[[1]][1])
swapcase(substr(test1[[1]][1], 1, 1))
test1
lapply(test1, function(x) substr(x, 1, 1))
new <- lapply(test1, function(x) toupper(old))
old <- lapply(test1, function(x) substr(x, 1, 1))
new <- lapply(test1, function(x) toupper(old))
new
old
new <- lapply(old, function(x) toupper(x))
new
test2 <- Map(function(x, y) gsub(x, y, test1), old, new)
test2
old
new
old[[1]]
new[[1]]
#' Concatenate strings together
#'
#' @description Concatenate strings together.
#'
#' @usage string_concat(a, b)
#' string_prefix(s, prefix)
#' s_prefix(s, prefix)
#' prefix(s, prefix)
#' string_suffix(s, suffix)
#' s_suffix(s, suffix)
#' suffix(s, suffix)
#'
#' @param s A string (character) vector.
#' @param a A string (character) vector.
#' @param b A string (character) vector.
#' @param collapse A string by which to separate the elements of a vector.
#'
#' @return The \code{\%&\%} operator acts similar to BASIC's \code{&}, concatenating two elements together.
#'
#' \code{string_prefix} and its synonyms prefix a string to a vector, while \code{string_suffix} and its synonyms suffix a string to a vector.
#'
#' @examples
#' "a" %&% "b"
#' string_prefix(rownames(mtcars), "A")
#' string_suffix(rownames(mtcars), "Z")
#'
#' @seealso \url{https://github.com/robertschnitman/stringops}
#' @rdname string_concat
string_concat <- function(a, b) paste0(a, b)
#' @rdname string_concat2
`%&%` <- string_concat
#' @rdname string_prefix
string_prefix <- function(s, prefix) prefix %&% s
s_prefix      <- string_prefix
prefix        <- string_prefix
#' @rdname string_suffix
string_suffix <- function(s, suffix) s %&% suffix
s_suffix      <- string_suffix
suffix        <- string_suffix
new
new <- lapply(old, function(x) toupper(x)) %>%
map(~ string_join('|'))
new
new <- lapply(old, function(x) toupper(x)) %>%
map(~ string_join(.x, '|'))
new
new <- lapply(old, function(x) toupper(x)) %>%
map(~ "^" %&% .x) %>%
map(~ string_join(.x, '|'))
new
new <- lapply(old, function(x) toupper(x)) %>%
map(~ "^" %&% .x) %>%
map(~ string_join(.x, '|')) %>%
map(string_chomp)
#' Remove (empty) characters from a string as inspired by Ruby
#'
#' @description Remove (empty) characters from a string as inspired by Ruby.
#'
#' @usage string_chomp(s)
#' s_chomp(s)
#' chomp(s)
#' string_chop(s)
#' s_chop(s)
#' chop(s)
#' string_trim(s, which, whitespace)
#' s_trim(s, which, whitespace)
#' trim(s, which, whitespace)
#'
#' @param s A string (character) vector.
#' @param which Denotes how to trim a vector (both, left only, or right only).
#' @param whitespace Denotes which whitespace characters to remove.
#'
#' @details As inspired by Ruby, \code{string_chomp} removes all whitespace characters in a string. The function \code{string_chop} removes the last character from a string. The function \code{string_trim} acts the same as \code{trimws} but has a more readable source code.
#'
#' @return Character vector.
#'
#' @examples
#' string_chomp(rownames(mtcars))
#' string_chop(rownames(mtcars))
#' string_trim("   s   ")
#'
#' @seealso \url{https://github.com/robertschnitman/stringops}
#' @rdname string_chomp
string_chomp <- function(s) gsub(" |\n|\t|\r", "", s)
s_chomp      <- string_chomp
chomp        <- string_chomp
#' @rdname string_chop
string_chop <- function(s) substr(s, 1, nchar(s) - 1)
s_chop      <- string_chop
chop        <- string_chop
#' @rdname string_cut
string_cut <- function(s, which = c('both', 'left', 'right')) {
which <- match.arg(which)
if (which == 'left') {
output <- substr(s, 2, nchar(s))
} else if (which == 'right') {
output <- string_chop(s)
} else if (which == 'both') {
output <- substr(s, 2, nchar(s) - 1)
} else {
stop('The "which" input must be specified as "both", "left", or "right".')
}
output
}
#' @rdname string_trim
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
# Make sure arguments match "which".
which <- match.arg(which)
# Define functions for easier referencing.
## Remove specific patterns
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
## vectorize switch so that we can apply the substitutions in a vectorized manner.
switch_out <- function(x, ...) sapply(x, switch, ...)
# Conditions for each "which" input.
cond_beg  <- '^' %&% whitespace %&% '+'
cond_end  <- whitespace %&% '+$'
cond_both <- "^" %&% whitespace %&% "|" %&% whitespace %&% "+$"
# Output should be based on user input for "which".
output <- switch_out(which,
left  = sub_out(s, cond_beg),
right = sub_out(s, cond_end),
both  = sub_out(s, cond_both))
# Initial output is a matrix, so flatten it to a vector so that
# users can use string_trim() on dataframe columns, for example.
output <- as.vector(output)
output
}
s_trim      <- string_trim
trim        <- string_trim
new <- lapply(old, function(x) toupper(x)) %>%
map(~ "^" %&% .x) %>%
map(~ string_join(.x, '|')) %>%
map(string_chomp)
new
new <- lapply(old, function(x) toupper(x)) %>%
map(~ "^" %&% .x) %>%
map(~ string_join(.x, '|')) %>%
map(string_chomp)
new
string_chomp
new <- lapply(old, function(x) toupper(x)) %>%
map(~ "^" %&% .x) %>%
map(~ string_join(.x, '|')) %>%
map(string_chop)
new
old <- lapply(test1, function(x) substr(x, 1, 1)) %>%
map(~ "^" %&% .x) %>%
map(~ string_join(.x, '|')) %>%
map(string_chop)
old
old <- lapply(test1, function(x) substr(x, 1, 1))
new <- lapply(old, function(x) toupper(x))
search <- old %>%
map(~ "^" %&% .x) %>%
map(~ string_join(.x, '|')) %>%
map(string_chop)
old
new
search
test2 <- Map(function(x, y) gsub(, y, test1), search, new)
test2 <- Map(function(x, y) gsub(x, y, test1), search, new)
test2
search
new
new
old
test2 <- Map(function(x, y) gsub(x, y, old), search, new)
test2
old
test1
map(test1, ~ strsplt(.x, ""))
map(test1, ~ strsplit(.x, ""))
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ replace(.x, 1, toupper(.x)))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x))))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(string_join)
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(" "))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " "))
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map(string_chop)
test2
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
test2
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
library(tidyverse)
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
test1 <- tolower(rn) %>%
strsplit(., " ")
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
})
library(tidyverse)
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
test1 <- tolower(rn) %>%
strsplit(., " ")
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x)))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
test2
library(tidyverse)
rn <- c('A COW', 'A DOG', 'A ZOMBIE')
test1 <- tolower(rn) %>%
strsplit(., " ")
test2 <- map(test1, ~ strsplit(.x, "")) %>%
map(~ map(.x, ~ replace(.x, 1, toupper(.x[1])))) %>%
map(~ map(.x, string_join)) %>%
map(~ string_join(.x, " ")) %>%
map_chr(string_chop)
test2
string_titlecase <- function(s) {
splits1 <- strsplit(tolower(s), " ")
splits2 <- lapply(splits1, function(x) strsplit(x, ""))
splits3 <- lapply(splits2, function(x) lapply(x, function(y) replace(y, 1, toupper(y[1]))))
splits4 <- lapply(splits3, function(x) lapply(x, string_join))
splits5 <- lapply(splits4, function(x) string_join(x, " "))
output  <- sapply(splits5, string_chop)
output
}
string_titlecase(rn)
roxygen2::roxygenise()
roxygen2::roxygenise()
strings <- c('and then there were none', 'silent hill: revelations', 'the lightning thief')
string_titlecase(strings)
string_cut("cut this please", which = 'both')
roxygen2::roxygenise()
roxygen2::roxygenise()
string_cut("cut this please", which = 'left')
string_cut("cut this please", which = 'right')
string_cut("cut this please", which = 'both')
devtools::install_github('robertschnitman/stringops', force = TRUE)
library(stringops)
"^" %&% whitespace %&% "|" %&% whitespace %&% "+$"
whitespace = '[ \t\r\n]'
"^" %&% whitespace %&% "|" %&% whitespace %&% "+$"
string_trim('   s   ', 'both')
#' @rdname string_trim
string_trim <- function(s, which = c('both', 'left', 'right'), whitespace = '[ \t\r\n]') {
# Make sure arguments match "which".
which <- match.arg(which)
# Define functions for easier referencing.
## Remove specific patterns
sub_out    <- function(x, r) gsub(r, '', x, perl = TRUE)
## vectorize switch so that we can apply the substitutions in a vectorized manner.
switch_out <- function(x, ...) sapply(x, switch, ...)
# Conditions for each "which" input.
cond_beg  <- '^' %&% whitespace %&% '+'
cond_end  <- whitespace %&% '+$'
cond_both <- "^" %&% whitespace %&% "*|" %&% whitespace %&% "*+$"
# Output should be based on user input for "which".
output <- switch_out(which,
left  = sub_out(s, cond_beg),
right = sub_out(s, cond_end),
both  = sub_out(s, cond_both))
# Initial output is a matrix, so flatten it to a vector so that
# users can use string_trim() on dataframe columns, for example.
output <- as.vector(output)
output
}
string_trim('   s   ', 'both')
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = TRUE)
rm(list = ls()
)
library(stringops)
string_trim("   s   ")
string_insert
stringr::str_count
stringi::stri_count
stringi::stri_count_coll
#' @rdname string_count
string_count <- function(s, pattern) {
loc <- gregexpr(pattern = pattern, text = s, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
}
string_count(rownames(mtcars), 'M')
string_count(rownames(mtcars), 'm')
string_count(rownames(mtcars), '^M')
#' @rdname string_count
string_count <- function(s, pattern) {
loc <- gregexpr(pattern = pattern, text = s)
sapply(loc, function(x) length(attr(x, "match.length")))
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
}
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), 'M')
test <- gregexpr('^M', rownames(mtcars))
test
args(gregexpr)
#' @rdname string_count
string_count <- function(s, pattern) {
loc <- gregexpr(pattern = pattern, text = s, perl = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
}
args(gregexpr)
string_count(rownames(mtcars), 'M')
args(gregexpr)
gregexpr('M', rownames(mtcars))
gregexpr('z', rownames(mtcars))
loc <- gregexpr('z', rownames(mtcars))
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
fruit
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "z", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = " ", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "Z", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "asd", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc
sapply(loc, function(x) attr(x, 'match.length')
)
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) length(attr(x, "match.length")))
loc <- gregexpr(pattern = "a", text = fruit, fixed = TRUE)
sapply(loc, function(x) attr(x, "match.length"))
out1 <- lapply(loc, function(x) attr(x, "match.length"))
out1
sapply(out1, function(x) sum(ifelse(x == -1, 0, 1)))
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), '^M', perl = TRUE)
#' @rdname string_count
string_count <- function(s, pattern, ...) {
# https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
locations <- gregexpr(pattern = pattern, text = s, ...)
matches <- lapply(locations, function(x) attr(x, "match.length"))
output <- sapply(matches, function(x) sum(ifelse(x == -1, 0, 1))) # -1 for no matches
output
}
string_count(rownames(mtcars), '^M')
string_count(rownames(mtcars), 'M')
string_count(rownames(mtcars), 'a')
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = T)
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = T)
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = TRUE)
roxygen2::roxygenise()
devtools::install_github('robertschnitman/stringops', force = T)
library(stringops)
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(initial, collapse %&% "$", "")
}
output
}
string_join(rownames(mtcars))
string_join(rownames(mtcars), ", ")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(initial, collapse %&% "+$", "")
}
output
}
string_join(rownames(mtcars), ", ")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(output, collapse %&% "+$", "")
}
output
}
string_join(rownames(mtcars), ", ")
test <- string_join(rownames(mtcars), ", ")
string_replace(test, test %&% "+$", "")
string_replace(test, test %&% "$", "")
string_replace(test, test, "")
string_replace(test, ", $", "")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_replace(output, collapse %&% "$", "")
}
output
}
string_join(rownames(mtcars), ", ")
roxygen2::roxygenise()
rm(list = ls())
devtools::install_github('robertschnitman/stringops)
devtools::install_github('robertschnitman/stringops')
library(stringops)
string_join(rownames(mtcars), ", ")
string_join(rownames(mtcars), "")
string_join(rownames(mtcars), ",")
"" == ", "
test <- string_join(rownames(mtcars), ", ")
collapse = ", "
test <- string_join(rownames(mtcars), collapse)
test
collapse %&% "$"
string_replace(test, collapse %&% "$", "")
string_remove(test, collapse %&% "$", "")
string_remove(test, collapse %&% "$")
#' @rdname string_join
string_join <- function(..., collapse = "") {
output <- paste0(..., collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_remove(output, collapse %&% "$")
}
output
}
string_join(rowname(mtcars), collapse = ", ")
string_join(rownames(mtcars), collapse = ", ")
string_join(rownames(mtcars), ", ")
#' @rdname string_join
string_join <- function(s, collapse = "") {
output <- paste0(s, collapse = collapse)
if (collapse != "") {
# Remove last separator.
output <- string_remove(output, collapse %&% "$")
}
output
}
string_join(rownames(mtcars), ", ")
string_join(rownames(mtcars), ", ")
devtools::install_github('robertschnitman/stringops', force = T)
install.packages('pkgdown')
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site
pkgdown::build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
args(pkgdown::build_site)
?pkgdown::build_site
pwd()
getwd()
pkgdown::build_site(paste0(getwd(), "/docs"))
pkgdown::build_site()
pkgdown::build_site()
