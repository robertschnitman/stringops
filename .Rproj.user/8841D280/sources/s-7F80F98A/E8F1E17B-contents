#' Find patterns in strings
#' 
#' @description Find strings.
#' 
#' @usage string_find(s, pattern)
#' s_find(s, pattern)
#' find(s, pattern)
#' string_findi(s, pattern)
#' s_findi(s, pattern)
#' findi(s, pattern)
#' string_findl(s, pattern)
#' s_findl(s, pattern)
#' findl(s, pattern)
#' string_findm(s, pattern)
#' s_findm(s, pattern)
#' findm(s, pattern)
#' string_replace(s, search, replace)
#' s_replace(s, search, replace)
#' find_replace(s, search, replace)
#' fr(s, search, replace)
#' search_replace(s, search, replace)
#' sr(s, search, replace)
#' string_remove(s, remove)
#' s_remove(s, remove)
#' string_countm(s, pattern, ...)
#' s_countm(s, pattern, ...)
#' countm(s, pattern, ...)
#'
#' @param s A string (character) vector.
#' @param pattern A regular expression pattern.
#' @param search A pattern to search.
#' @param replace The string to replace the searched pattern.
#' @param remove The string to remove.
#' @param ... Parameters to pass to \code{gregexpr}
#' 
#' @return Character vector for all functions except the \code{findl} functions, which produce a Boolean vector.
#' 
#' @details The function \code{string_find} subsets a vector to the values matching a given pattern. Its synonyms are \code{s_find} and \code{find}.
#' 
#' The function \code{string_findi} provides the indices where a pattern in a vector is found. Its synonyms are \code{s_findi} and \code{findi}.
#' 
#' The function \code{string_findl} detects whether a pattern exists in a vector. Its synonyms are \code{s_findl} and \code{findl}.
#' 
#' The \code{findm} functions finds pattern matches and returns NA if none are found.
#' 
#' The \code{*_replace} functions act the same as \code{gsub}.
#' 
#' The \code{*_remove} functions blank out a matching pattern.
#' 
#' The \code{string_count}/\code{s_count} counts the number of matches in a string.
#'
#' @examples
#' rn <- rownames(mtcars)
#' 
#' string_find(rn, "^M")
#' string_findi(rn, "^M")
#' string_findl(rn, "^M")
#' string_findm(rn, "^M")
#' 
#' string_replace(rn, "^M", "Z")
#' string_remove(rn, "^M")
#' string_count(rn, 'a')
#' 
#' @seealso \url{https://github.com/robertschnitman/stringops}

#' @rdname string_find
string_find  <- function(s, pattern) grep(pattern, s, value = TRUE)
s_find       <- string_find
find         <- string_find

string_findi <- function(s, pattern) grep(pattern, s)
s_findi      <- string_findi
findi        <- string_findi

string_findl <- function(s, pattern) grepl(pattern, s)
s_findl      <- string_findl
findl        <- string_findl

string_findm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
s_findm      <- string_findm
findm        <- string_findm

#' @rdname string_replace
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- string_replace
search_replace <- string_replace
sr             <- string_replace

#' @rdname string_remove
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove

#' @rdname string_count
string_countm <- function(s, pattern, ...) {
  
  # https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
  locations <- gregexpr(pattern = pattern, text = s, ...)
  
  matches <- lapply(locations, function(x) attr(x, "match.length"))
  
  output <- sapply(matches, function(x) sum(ifelse(x == -1, 0, 1))) # -1 for no matches
  
  output
  
}
s_countm <- string_countm
countm   <- string_countm
