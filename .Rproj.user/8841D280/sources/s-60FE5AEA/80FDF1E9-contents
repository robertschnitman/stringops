#' Spot patterns in strings
#' 
#' @description Spot patterns in strings.
#' 
#' @usage string_spot(s, pattern)
#' s_spot(s, pattern)
#' spot(s, pattern)
#' string_spoti(s, pattern)
#' s_spoti(s, pattern)
#' spoti(s, pattern)
#' string_spotl(s, pattern)
#' s_spotl(s, pattern)
#' spotl(s, pattern)
#' string_spotm(s, pattern)
#' s_spotm(s, pattern)
#' spotm(s, pattern)
#' string_replace(s, search, replace)
#' s_replace(s, search, replace)
#' find_replace(s, search, replace)
#' fr(s, search, replace)
#' search_replace(s, search, replace)
#' sr(s, search, replace)
#' string_remove(s, remove)
#' s_remove(s, remove)
#' string_countm(s, pattern, ...)
#' s_countm(s, pattern, ...)
#' countm(s, pattern, ...)
#' string_spot_invert(s, pattern)
#' string_spotm_invert(s, pattern)
#'
#' @param s A string (character) vector.
#' @param pattern A regular expression pattern.
#' @param search A pattern to search.
#' @param replace The string to replace the searched pattern.
#' @param remove The string to remove.
#' @param ... Parameters to pass to \code{gregexpr()}
#' 
#' @return Character vector for all functions except the \code{spotl()} and \code{countm()} functions, which produce Boolean and numeric vectors respectively.
#' 
#' @details The function \code{string_spot()} subsets a vector to the values matching a given pattern. Its synonyms are \code{s_spot()} and \code{spot()}.
#' 
#' The function \code{string_spoti()} provides the indices where a pattern in a vector is found. Its synonyms are \code{s_spoti()} and \code{spoti()}.
#' 
#' The function \code{string_spotl()} detects whether a pattern exists in a vector. Its synonyms are \code{s_spotl()} and \code{spotl()}.
#' 
#' The \code{spotm()} functions spots pattern matches and returns NA if none are found.
#' 
#' The \code{*_replace()} functions act the same as \code{gsub()}.
#' 
#' The \code{*_remove()} functions blank out a matching pattern.
#' 
#' The \code{string_countm()} counts the number of matches in a string.
#' 
#' The \code{string_spot_invert()} subsets a string for non-matches.
#' 
#' The \code{string_spotm_invert()} returns NA for matches and the matching value otherwise.
#'
#' @examples
#' rn <- rownames(mtcars)
#' 
#' string_spot(rn, "^M")
#' string_spoti(rn, "^M")
#' string_spotl(rn, "^M")
#' string_spotm(rn, "^M")
#' 
#' string_replace(rn, "^M", "Z")
#' string_remove(rn, "^M")
#' string_countm(rn, 'a')
#' 
#' @seealso \url{https://github.com/robertschnitman/stringops}

#' @rdname string_spot
string_spot  <- function(s, pattern) grep(pattern, s, value = TRUE)
s_spot       <- string_spot
spot         <- string_spot

string_spoti <- function(s, pattern) grep(pattern, s)
s_spoti      <- string_spoti
spoti        <- string_spoti

string_spotl <- function(s, pattern) grepl(pattern, s)
s_spotl      <- string_spotl
spotl        <- string_spotl

string_spotm <- function(s, pattern) ifelse(grepl(pattern, s), s, NA_character_)
s_spotm      <- string_spotm
spotm        <- string_spotm

#' @rdname string_replace
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- string_replace
search_replace <- string_replace
sr             <- string_replace

#' @rdname string_remove
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove

#' @rdname string_count
string_countm <- function(s, pattern, ...) {
  
  # https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
  locations <- gregexpr(pattern = pattern, text = s, ...)
  
  matches <- lapply(locations, function(x) attr(x, "match.length"))
  
  # -1 for no matches
  output <- sapply(matches, function(x) sum(ifelse(x == -1, 0, 1))) 
  
  output
  
}
s_countm <- string_countm
countm   <- string_countm

#' @rdname string_spot_invert
string_spot_invert <- function(s, pattern) {
  
  # string vector length must be greater than 0.
  stopifnot(length(s) > 0)
  
  # Find the indices so we know which indices to exclude.
  indices <- string_spoti(s, pattern)
  
  # Exclude found indices so we can get the non-matches.
  output <- s[!c(1:length(s)) %in% indices]
  
  output
  
}
s_spot_invert <- string_spot_invert
spot_invert   <- string_spot_invert

#' @rdname string_spotm_invert
string_spotm_invert <- function(s, pattern) {
  
  # String vector length must be greater than 0.
  stopifnot(length(s) > 0)
  
  # Find indices so we can display them as NA.
  indices <- string_spoti(s, pattern)
  
  # Display matches as NA and non-matches with their full element.
  output <- ifelse(!c(1:length(s)) %in% indices, s, NA_character_)
  
  output
  
}
s_spotm_invert <- string_spotm_invert
spotm_invert   <- string_spotm_invert
