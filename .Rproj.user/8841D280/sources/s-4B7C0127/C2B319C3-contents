#' Spot patterns in strings
#' 
#' @description Spot patterns in strings.
#' 
#' @usage string_spot(s, pattern, invert = FALSE)
#' s_spot(s, pattern, invert = FALSE)
#' spot(s, pattern, invert = FALSE)
#' string_spoti(s, pattern, invert = FALSE)
#' s_spoti(s, pattern, invert = FALSE)
#' spoti(s, pattern, invert = FALSE)
#' string_spotl(s, pattern, invert = FALSE)
#' s_spotl(s, pattern, invert = FALSE)
#' spotl(s, pattern, invert = FALSE)
#' string_spotm(s, pattern, invert = FALSE)
#' s_spotm(s, pattern, invert = FALSE)
#' spotm(s, pattern, invert = FALSE)
#' string_replace(s, search, replace)
#' s_replace(s, search, replace)
#' find_replace(s, search, replace)
#' fr(s, search, replace)
#' search_replace(s, search, replace)
#' sr(s, search, replace)
#' string_remove(s, remove)
#' s_remove(s, remove)
#' string_countm(s, pattern, ...)
#' s_countm(s, pattern, ...)
#' countm(s, pattern, ...)
#'
#' @param s A string (character) vector.
#' @param pattern A regular expression pattern.
#' @param invert Boolean value (\code{TRUE/FALSE}) for whether to find actual matches (\code{FALSE}; default) or non-matches (\code{TRUE}).
#' @param search A pattern to search.
#' @param replace The string to replace the searched pattern.
#' @param remove The string to remove.
#' @param ... Parameters to pass to \code{gregexpr()}.
#' 
#' @return Character vector for all functions except the \code{spotl()}, \code{spoti()}, and \code{countm()} functions, which produce Boolean, numeric, and numeric vectors respectively.
#' 
#' @details The function \code{string_spot()} subsets a vector to the values matching a given pattern. By setting \code{invert = TRUE}, the function will subset the vector for non-matches.
#' 
#' The function \code{string_spoti()} provides the indices where a pattern in a vector is found. By setting \code{invert = TRUE}, the function will find the indices of non-matches.
#' 
#' The function \code{string_spotl()} detects whether a pattern exists in a vector, outputting a Boolean value (\code{TRUE/FALSE}). Setting \code{invert = TRUE} is the same as \code{!grepl()}.
#' 
#' The \code{string_spotm()} function spots pattern matches and returns \code{NA} if none are found. Setting \code{invert = TRUE} will make the function find non-matches and return \code{NA} for matches.
#' 
#' The \code{string_replace()} function acts the same as \code{gsub()}.
#' 
#' The \code{string_remove()} function blanks out a matching pattern.
#' 
#' The \code{string_countm()} counts the number of matches in a string.
#'
#' @examples
#' rn <- rownames(mtcars)
#' 
#' string_spot(rn, "^M")
#' string_spot(rn, '^M', invert = TRUE)
#' string_spoti(rn, "^M")
#' string_spotl(rn, "^M")
#' string_spotm(rn, "^M")
#' 
#' string_replace(rn, "^M", "Z")
#' string_remove(rn, "^M")
#' string_countm(rn, 'a')
#' 
#' 
#' @seealso \url{https://github.com/robertschnitman/stringops}

#' @rdname string_spot
string_spot  <- function(s, pattern, invert = FALSE) {
  
  # String vector length must be greater than 0.
  stopifnot(length(s) > 0)
  
  # Different cases for invert
  if (invert == FALSE) {
    
    output <- grep(pattern, s, value = TRUE)
    
  } else {
    
    # Find indices 
    indices <- string_spoti(s, pattern)
    
    # Subset for non-matches
    output <- s[!c(1:length(s)) %in% indices]
    
  }
  
  output
  
}
s_spot       <- string_spot
spot         <- string_spot

string_spoti <- function(s, pattern, invert = FALSE) {
  
  # String vector length must be greater than 0.
  stopifnot(length(s) > 0)
  
  # Get indices for matching purposes.
  indices <- seq_along(s)
  
  pre_match <- grep(pattern, s)
  
  # Different output depending on invert input.
  if (invert == FALSE) {
    
    # Pre-match is the same thing as just finding the pattern.
    output <- pre_match
    
  } else {
    
    # Get indices NOT in the matched indices.
    output <- indices[!indices %in% pre_match]
    
  }
  
  # Output should be a string vector.
  output
  
}
s_spoti      <- string_spoti
spoti        <- string_spoti

string_spotl <- function(s, pattern, invert = FALSE) {
  
  if (invert == FALSE) {
    
    output <- grepl(pattern, s)
    
  } else {
    
    output <- !grepl(pattern, s)
    
  }
  
  output
  
}
s_spotl      <- string_spotl
spotl        <- string_spotl

string_spotm <- function(s, pattern, invert = FALSE) {
  
  if (invert == FALSE) {
    
    output <- ifelse(grepl(pattern, s), s, NA_character_)
    
  } else {
    
    output <- ifelse(!grepl(pattern, s), s, NA_character_)
    
  }
  
  output
  
}
s_spotm      <- string_spotm
spotm        <- string_spotm

#' @rdname string_replace
string_replace <- function(s, search, replace) gsub(search, replace, s)
s_replace      <- string_replace
find_replace   <- string_replace
fr             <- string_replace
search_replace <- string_replace
sr             <- string_replace

#' @rdname string_remove
string_remove <- function(s, remove) gsub(remove, "", s)
s_remove      <- string_remove

#' @rdname string_count
string_countm <- function(s, pattern, ...) {
  
  # https://stringr.tidyverse.org/articles/from-base.html#overall-differences-1
  locations <- gregexpr(pattern = pattern, text = s, ...)
  
  matches   <- lapply(locations, function(x) attr(x, "match.length"))
  
  # -1 for no matches
  output <- sapply(matches, function(x) sum(ifelse(x == -1, 0, 1))) 
  
  output
  
}
s_countm <- string_countm
countm   <- string_countm