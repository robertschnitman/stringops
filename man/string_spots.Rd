% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string_spots.R
\name{string_spot}
\alias{string_spot}
\title{Spot patterns in strings}
\usage{
string_spot(s, pattern, value = TRUE, ...)
string_spoti(s, pattern, ...)
string_spotl(s, pattern, ...)
string_spotm(s, pattern, invert = FALSE, ...)
string_replace(s, search, replace, ...)
string_remove(s, remove, ...)
string_countm(s, pattern, ...)
string_locate(s, pattern, invert = FALSE, ...)
}
\arguments{
\item{s}{A string (character) vector.}

\item{pattern}{A regular expression pattern.}

\item{value}{Boolean value (\code{TRUE/FALSE}) for whether to return the actual values (the former) or the indices (the latter).}

\item{...}{Parameters to pass to \code{grep()}, \code{grepl()}, \code{gsub()}, or \code{gregexpr()}.}

\item{invert}{Boolean value (\code{TRUE/FALSE}) for whether to find actual matches (\code{FALSE}; default) or non-matches (\code{TRUE}).}

\item{search}{A pattern to search.}

\item{replace}{The string to replace the searched pattern.}

\item{remove}{The string to remove.}
}
\value{
Character vector for all functions except the \code{string_spotl()}, \code{string_spoti()}, and \code{string_countm()} functions, which produce Boolean, numeric, and numeric vectors respectively.
}
\description{
Spot patterns in strings.
}
\details{
The function \code{string_spot()} subsets a vector to the values matching a given pattern. Optional inputs get passed to \code{grep()}. Synonyms are \code{s_spot()} and \code{spot()}.

The function \code{string_spoti()} subsets a vector to the indices matching a given pattern. Optional inputs get passed to \code{grep()}. Synonyms are \code{s_spoti()} and \code{spoti()}.

The function \code{string_spotl()} detects whether a pattern exists in a vector, outputting a Boolean value (\code{TRUE/FALSE}). Optional inputs get passed to \code{grepl()}. Synonyms are \code{s_spotl()} and \code{spotl()}.

The \code{string_spotm()} function spots pattern matches and returns \code{NA} if none are found. Optional inputs get passed to \code{grepl()}. Synonyms are \code{s_spotm()} and \code{spotm()}.

The \code{string_replace()} function acts the same as \code{gsub()} with the inputs ordered differently. Optional inputs get passed to \code{gsub()}. Synonyms are \code{s_replace()}, \code{search_replace()}, \code{sr()}, \code{find_replace()}, and \code{fr()}.

The \code{string_remove()} function blanks out a matching pattern. Optional inputs get passed to \code{gsub()}. Synonym is \code{s_remove()}.

The \code{string_countm()} function counts the number of matches in a string. Optional inputs get passed to \code{gregexpr()}. Synonyms are \code{s_countm()} and \code{countm()}.

The \code{string_locate()} functions produces the character positions at where the pattern match are found--non-matches are produced if \code{invert = TRUE}. Optional inputs are passed to \code{gregexpr()}. Synonyms are \code{s_locate()} and \code{locate()}.
}
\examples{
rn <- rownames(mtcars)

string_spot(rn, "^M")
string_spot(rn, '^M', invert = TRUE)
string_spoti(rn, "^M")
string_spotl(rn, "^M")
string_spotm(rn, "^M")

string_replace(rn, "^M", "Z")
string_remove(rn, "^M")
string_countm(rn, 'a')

string_locate(rn, 'a')
string_locate(rn, 'a', invert = TRUE)


}
\seealso{
\url{https://github.com/robertschnitman/stringops}
}
