% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string_spot.R
\name{string_spot}
\alias{string_spot}
\title{Spot patterns in strings}
\usage{
string_spot(s, pattern)
s_spot(s, pattern)
spot(s, pattern)
string_spoti(s, pattern)
s_spoti(s, pattern)
spoti(s, pattern)
string_spotl(s, pattern)
s_spotl(s, pattern)
spotl(s, pattern)
string_spotm(s, pattern)
s_spotm(s, pattern)
spotm(s, pattern)
string_replace(s, search, replace)
s_replace(s, search, replace)
find_replace(s, search, replace)
fr(s, search, replace)
search_replace(s, search, replace)
sr(s, search, replace)
string_remove(s, remove)
s_remove(s, remove)
string_countm(s, pattern, ...)
s_countm(s, pattern, ...)
countm(s, pattern, ...)
string_spot_invert(s, pattern)
string_spotm_invert(s, pattern)
}
\arguments{
\item{s}{A string (character) vector.}

\item{pattern}{A regular expression pattern.}

\item{search}{A pattern to search.}

\item{replace}{The string to replace the searched pattern.}

\item{remove}{The string to remove.}

\item{...}{Parameters to pass to \code{gregexpr()}}
}
\value{
Character vector for all functions except the \code{spotl()} and \code{countm()} functions, which produce Boolean and numeric vectors respectively.
}
\description{
Spot patterns in strings.
}
\details{
The function \code{string_spot()} subsets a vector to the values matching a given pattern.

The function \code{string_spoti()} provides the indices where a pattern in a vector is found.

The function \code{string_spotl()} detects whether a pattern exists in a vector.

The \code{string_spotm()} function spots pattern matches and returns NA if none are found.

The \code{*_replace()} functions act the same as \code{gsub()}.

The \code{*_remove()} functions blank out a matching pattern.

The \code{string_countm()} counts the number of matches in a string.

The \code{string_spot_invert()} subsets a string for non-matches.

The \code{string_spotm_invert()} returns NA for matches and the non-matching value otherwise.
}
\examples{
rn <- rownames(mtcars)

string_spot(rn, "^M")
string_spoti(rn, "^M")
string_spotl(rn, "^M")
string_spotm(rn, "^M")

string_replace(rn, "^M", "Z")
string_remove(rn, "^M")
string_countm(rn, 'a')

string_spot_invert(rn, "^M")
string_spotm_invert(rn, "^M")

}
\seealso{
\url{https://github.com/robertschnitman/stringops}
}
